Comments for code

1 ) init.py :
    # Here we have defined the default configuration for our application
    # We have to initialize the instance of the decrypt library for passowrd hash
    # Getters and setters help you maintain data encapsulation, abstraction, and validation, promoting cleaner and more maintainable code.

    from flask import Flask, render_template
    from flask_sqlalchemy import SQLAlchemy
    from flask_bcrypt import Bcrypt
    from flask_login import LoginManager

    app = Flask(__name__)

    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///market.db'
    app.config['SECRET_KEY'] = '008035dca5ea8092e61a8351'
    db = SQLAlchemy(app)    
    bcrypt = Bcrypt(app)
    login_manager = LoginManager(app)
    login_manager.login_view = "login_page" # configuration of directly accessing the login page
    login_manager.login_message_category = "info"
    from market import routes

2 ) forms.py :
    none

3 ) routes.py :
    from market import app
    from flask import render_template, url_for, redirect, request, flash ,get_flashed_messages, request
    from market.models import Item, User
    from market import db, login_manager
    from market.forms import RegisterForm,LoginForm, PurchaseItemForm, SellItemForm
    from flask_login import login_user, logout_user, current_user, login_required, current_user # flask_login has many built-in functions like it stores current_user so by using jinja we will access the current user by current_user  


    @app.route('/')
    @app.route('/home')
    def home_page():
        return render_template('home.html')

    @app.route('/market', methods=['GET', 'POST'])
    @login_required
    def market_page():
        # Purchase Item Logic
        purchase_form = PurchaseItemForm()
        selling_form = SellItemForm()
        if request.method == "POST":
            purchased_item = request.form.get('purchased_item')
            p_item_object = Item.query.filter_by(name=purchased_item).first()
            if p_item_object:
                if current_user.can_purchase(p_item_object):   
                    p_item_object.buy(p_item_object)
                    flash(f"Congratulation! You purchased {p_item_object.name} for {p_item_object.price}$", category="success")
                else:
                    flash(f"Unfortunately , You don't have enough credit to purchase {p_item_object.name}$", category = "danger")
        
        # Sell Item Logic
            sold_item = request.form.get('sold_item')
            s_item_object = Item.query.filter_by(name = sold_item).first()
            if s_item_object:
                if current_user.can_sell(s_item_object):
                    s_item_object.sell(sold_item)
                    flash(f"You've successfully sell back the item {s_item_object.name} and you got back it's {s_item_object.price}" , category = "success")
                else:
                    flash(f"Unfortunately !! Something went wrong while selling back the item to the market .", category="danger")
                    return redirect(url_for('market_page'))
                
            return redirect(url_for('market_page'))
                
                

        if request.method == "GET":
            items = Item.query.all()
            owned_items = Item.query.filter_by(owner=current_user.id) # Handles the get request : it queries the database for all the available items that are owned by the current user
            return render_template('market.html', items=items, purchase_form=purchase_form, owned_items=owned_items, selling_form=selling_form)

    @app.route('/register', methods = ['GET','POST'])  
    def register_page():
        form = RegisterForm()
        if request.method == "POST": 
            # At some extend level auth
            if form.validate_on_submit():
                # form here calling it for User's instance 
                user_to_create = User(username = form.username.data,
                                    email_address = form.email_address.data,
                                    password = form.password1.data) # here the password is the hashed passwor we get from models.py through getter 
                db.session.add(user_to_create)
                db.session.commit()  
                login_user(user_to_create)
                flash(f" You're registered succesfully {user_to_create.username}", category='success')
                return redirect(url_for('home_page'))
            
            # When we got error
            elif form.errors != {}: 
                # We will iterate over it so that if one then it's ok and if many then it will get us all the errors:
                # As it is a dict so , the values part contains the error msg
                for error_msg in form.errors.values():
                    flash(f'There was an error while creating a user : {error_msg}', category='danger')
        return render_template('register.html', form=form)  

    @app.route('/login',methods = ['GET','POST'])
    def login_page():
        form = LoginForm() # This is the login-form class defined in models.py such that when it reaches to the /login then it will go to forms.py and check for every validations that is applied on the forms.py and then go on routes.py for further problems

        if form.validate_on_submit():
            attempted_user = User.query.filter_by(username = form.username.data).first()  # username is a variable containing user name of the user and we are making it equal to the user's entered username if corrected then we will move forward    
            if attempted_user and attempted_user.check_password_correction(attempted_password = form.password.data):
                login_user(attempted_user)
                flash(f"Congratulation !! You're successfully logged In {attempted_user.username}", category='success') # attempted_user contains username value so to access the current username we will write attempted_user and then fetch by .username 
                return redirect(url_for('market_page')) 
            else:
                flash("Danger !! Username Or Password is incorrect .", category='danger')
                return render_template('login.html')


        return render_template('login.html', form=form)

    @app.route('/logout')
    def logout_page():
        logout_user()
        flash("You've been logged out !! ", category="info")
        return redirect(url_for("home_page"))

4 ) models.py : 
    from market import db, login_manager
    from market import bcrypt
    from flask_login import UserMixin, current_user # it will provide some powerful built-in methods 

    # login_manager # is used to tell Flask-Login how to load a user object from the database based on the user ID stored in the session . This decorator should be applied to a function that accepts a user_id as an argument and returns a user object.
    # The load_user function that you've shown is the function that you define to be used as the user loader. It's used to retrieve a user object from the database based on the provided user_id. The function should query the database and return the corresponding user object.
    # When a user logs in, Flask-Login stores the user ID in the session. When you need to access the current user, Flask-Login uses the load_user function to retrieve the user object based on the stored user ID. This enables you to access the current user's data in a convenient and secure manner throughout your application
    @login_manager.user_loader 
    def load_user(user_id):
        return User.query.get(user_id)

    class User(db.Model, UserMixin):
        id = db.Column(db.Integer(), primary_key = True)
        username = db.Column(db.String(30), nullable = False, unique = True)
        email_address = db.Column(db.String(50), nullable = False, unique = True)
        password_hash = db.Column(db.String(60), nullable = False)
        budget = db.Column(db.Integer(), nullable = False, default = 1000)

        @property # get
        def prettier_budget(self):
            magnitude = len(str(self.budget)) # 1000
        
            if magnitude >= 7:  # Million or greater
                return f"{self.budget // 1000000} million $"
            elif magnitude >= 4:  # Thousand or greater
                formatted_budget = f"{self.budget:,}"  # Use Python's built-in comma formatting
                return f"{formatted_budget} $"
            else:
                return f"{self.budget}$"
        # Backref : Back-referrence to tha

        # Backref : Back-referrence to that user model.
        # In the scenario we've to check an iphone item and it's own user so we'll grap the item object and access it by the attr of owned user . It will allow us to check the owner of the specific item 
        # lazy = True, bcz without this, the sqlalchemy won't recognize all the objects of items 
        
        items = db.relationship('Item', backref = 'owned_user', lazy = True) 

    # Using getter and setter function 
    # In Python, getters and setters are methods used to control access to class attributes, providing a way to encapsulate and manage attribute access and modification. 
    # A getter is a method that's used to retrieve the value of an attribute. It provides controlled access to the attribute by performing additional actions or validations before returning the value. Getters are often used to implement computed properties or to ensure that the returned value adheres to certain rules.

    # @property decorator to define a getter for the password attribute. However, the attribute you're getting is actually password_hash.

        @property # getter
        def password(self):
            return self.password

    # The @password.setter method is a setter method associated with the password attribute. When you assign a value to user.password, this setter method is invoked. It receives the plain-text password as an argument, performs the hashing using bcrypt, and then stores the hashed value in the password_hash attribute.
    # In contrast, the getter method is defined using @property to provide access to the value of the password_hash attribute. This getter method is unrelated to the setter method. It allows you to access the hashed password value using the user.password syntax.
        @password.setter # setter
        def password(self, plain_text_password):
            self.password_hash = bcrypt.generate_password_hash(plain_text_password)

    # It means that self.password_hash is first checked by setter fn and then it checks the password_hash with the attempted_user
        def check_password_correction(self, attempted_password):
            return bcrypt.check_password_hash(self.password_hash,attempted_password) # If we use if condition then it will return true or false so we make it return fn so that in routes we can call it out
        

        def can_purchase(self,item_obj): # boolean value
            return self.budget>=item_obj.price # will return true or false

        # If this item_obj is in the items (db) 

        def can_sell(self,item_obj):
            return item_obj in self.items # return boolean

    # A relationship of one to many is maintained between the user and the items. 

    class Item(db.Model):
        id = db.Column(db.Integer(), primary_key = True)
        name = db.Column(db.String(30), nullable = False, unique = True)
        price = db.Column(db.Integer(), nullable = False)
        barcode = db.Column(db.String(12), nullable = False, unique = True )
        description = db.Column(db.String(1024),nullable = False, unique = True)
        owner = db.Column(db.Integer(), db.ForeignKey('user.id'))
        
        
        
        # use for displaying the meaningful info about the object 
        # returns a formatted string that includes the name of the item.

        def __repr__(self):
            return f"Item : {self.name}"

        def can_sell():
            pass

        def buy(self,item_obj):
            self.owner = current_user.id
            current_user.budget -= self.price
            db.session.commit() 
        
        def sell(self,item_obj):
            self.owner = None # make ownership to none
            current_user.budget += self.price
            db.session.commit()